Q: Welche Rollen erfüllst du im Unternehmen?
A: Ich bin Berater und Softwarearchitekt.
Q: Welche Daten aus DevOps Tools schaust du dir in deiner Tätigkeit als Berater an?
A: Das kann sehr unterschiedlich sein, je nachdem bei welchem Kunden ich bin. Bei vielen Kunden muss ich auch eine Datenschutzerklärung unterschreiben, bei der die Weitergabe von Kundendaten natürlich strengstens untersagt ist. Daten die für mich relevant sind sind z.B. Issue Tracking Systeme, sowohl bei dem Kunden vor Ort, als auch für meine Arbeit für Open Source Projekte. Was für Daten benutze ich denn noch? Ich habe mich ehrlich gesagt noch wenig damit auseinandergesetzt. 
Q: Ja, das ist tatsächlich ganz schön tricky, wenn man da noch nie darüber nach gedacht hat. Vielleicht kannst du einfach mal im Kopf nach und nach Tools durch gehen, die du benutzt und dann mal überlegen wo du dir irgendwelche Zeitstempel anschaust oder dir vielleicht auch irgendwelche Statistiken anschaust? Sei es jetzt bei uns intern oder beim Kunden vielleicht auch.
A: Statistiken? Schwer zu sagen. Natürlich Metadaten über den Code überall, aber ich glaube das ist jetzt nicht relevant für das Interview gerade.
Q: Doch, also Git mit seinen Zeitstempeln ist durchaus relevant. Der Kontext ist: wenn ich mir z.B. anschaue wann jemand commited hat, dann kann ich dort auch sehen, wann jemand gearbeitet hat.
A: Das ist korrekt. Damit setze ich mich aber als Berater nicht auseinander. Das ist nicht mein Fokus, an dieser Stelle zu erfahren wann ein Entwickler den Code entwickelt bzw. gepusht hat.
Q: Darum geht es jetzt auch nicht. Es geht darum was du dir anschaust und was für dich relevant ist.
Dann wären eben auch die nächsten Fragen: wieviele Informationen brauchst du, welchen Detailgrad brauchst du dort, etc..
A: Ja okay, ich merke worauf das hier hinausgeht. Also ich brauche natürlich nicht den Zeitstempel des Codes. Für mich die relevanten Informationen sind definitiv der Code selbst. Ansonsten noch wer diesen Code geschrieben hat, damit ich diese Person entsprechend kontaktieren könnte. Bzw. bei Code Reviews, wenn man das wirklich ganz verschlüsseln würde, dann würde sogar eigentlich nur der Code ausreichen. Wenn ich den Code kommentieren könnte und die Person, die den Code geschrieben hat die Kommentare dann entsprechend bekommt und da dann nachbessern und ggf. auch Rückfragen stellen kann über dieses Issue. Dann wäre für mich tatsächlich vorstellbar, dass das komplett anonymisiert passieren könnte. Wie gesagt, Zeitstempel sind für mich, in meiner Funktion komplett irrelevant. Warscheinlich in anderen Bereichen sehr viel mehr. Natürlich bekomme ich als Berater auch spezielle Aufgaben und muss natürlich wissen wie diese Aufgaben aussehen. Das ist irgendwo Dokumentiert. Es ist eben sehr facettenreich, was ich mache. Manchmal ist es nur eine grobe Idee aus der dann use-cases entstehen. Die werden natürlich auch niedergeschrieben. Das ist auch eine Art von Dokumentation, aber da sind auch keine.. Soll es um personenbezogene Daten eigentlich gehen bei dieser Frage? Also personenbezogene Daten sind an der Stelle auch wieder nicht relevant. Natürlich muss ich, wenn ich eine Schulung gebe Beispielsweise oder mit einem Entwickler pairprogramming mache, was ich häufig mache. Natürlich muss ich den kennen und einschätzen können, wie die Qualifikation auch ist, dass ich auch auf das entsprechende Level eingehen kann und dem Entwickler den größtmöglichen Nutzen bringen kann. Es bringt nichts, wenn ich über irgendwelche Dinge referiere, über die der Entwickler keine Ahnung hat. Das heißt, da muss ich den Wissensstand, der ja personenbezogen ist erfahren. Aber das wird auch nicht weitergereicht an die Datenverarbeitung im Prinzip. Das ist dann ein persönliches Gespräch.
Q: Okay, das wollte ich nämlich gerade fragen: wie kommst du denn auf den persönlichen Wissensstand von jemandem anhand von irgendetwas was du z.B. auf dem Issue Tracker oder auf GitHub finden würdest? Oder eben eher garnicht?
A: Das kommt von der Art der Nachfrage ab. Ich erzähle erstmal das was gefordert ist, was die entsprechende Lösung sein sollte für das Problem eines Kunden und es kommen dann entsprechende Nachfragen, wenn etwas unverständlich ist oder der Kunde irgendwo noch abgeholt werden muss und die Grundprinzipien von dem, was ich dann erläutern will vielleicht noch nicht verstanden hat. Dann kann ich natürlich darauf eingehen. Das kann natürlich auch in einem Issue Tracking System passieren. Wenn jemand ein Patch liefert für irgendetwas, oder irgendein Issue erfüllt und ich da entsprechend reviewen soll oder mit an diesem Ticket arbeite, dann kann ich natürlich auch anhand der Kommentare Metainformationen bezüglich des Wissens herauslesen. Da ist natürlich auch wieder die Frage: können Maschienen das auch?
Q: Ich versuche mal ein wenig zurückzukommen auf personenbezogene Mitarbeiterdaten. Wenn ich das jetzt richtig bei dir heraushöre, dann schaust du dir in deinem Entwickleralltag weder irgendwelche Dashboards mit Issueinformationen an, noch interessiert dich wann wer was gebaut oder gemacht hat? Zum Beispiel auf dem Continuous Integration Server, gibt es dort irgendwelche Daten, Zeitstempel, etc., die für dich wichtig sind oder auf die du immer wieder achtest?
A: Zeitstempel jetzt nicht direkt aber es ist natürlich wichtig welcher Commit für den Fehlschlag eines Builds verantwortlich ist um entsprechend dort nachzubessern. Anhand dessen kann man natürlich wieder Rückschlüsse darauf ziehen, denn der fehlgeschlagene Build verweißt wieder auf ein Ticket, welches wiederum an eine Person gebunden ist. Und dann gibt es entsprechend weiter Plugins mit denen weitere Informationen ausgelesen werden können. Bei dem Build Prozess kann ja vieles entstehen – nehmern wir z.B. JaCoCo, Java Code Coverage. Ist die schlechter geworden durch den letzten Commit dieses Mitarbeiters? Das könnte ich dann auch wieder bewerten und dem sagen: du sollst mehr Tests schreiben. Warum ist die Testabdeckung in deiner neuen Klasse nicht gegeben? Das kann man entsprechend tracken. Oder es gibt SonarCube Server, wo auch auf einmal neue Issues aufpoppen können nach einem Commit, was man dann wieder einem User zuordnen kann. Und mir wird gerade bewusst: das ist ganz schön krass was man daraus ablesen kann und auf den User wieder zurückführen kann an der Stelle. Man hat ja als Entwickler in einem Unternehmen eine lange Historie und ich denke schon, dass Tools wie Sonar in der Lage sind entsprechend.. Es werden ja auch neue Issues angezeigt, die durch einen Commit hinzugekommen sind und da ist man natürlich schon angehalten zu sehen: oh, ich habe noch etwas weiteres kaputt gemacht, etwas nicht richtig gemacht, sollte da möglichst nachbassen. Und das kann man denke ich auch tracken und wenn dann ein User häufig sowas macht, dann entsprechend vielleicht auch negative Schlüsse über diese Person ziehen.
Q: Also du könntest dir aufjedenfall Vorstellen, dass man so etwas Auswertet zur Leistungsbeurteilung und Qualitätssicherung?
A: Ja, ich kann das nicht gut heißen, aber tatsächlich steht das natürlich öffentlich da. Ich bin schon in ganz vielen Unternehmen gewesen, wo tatsächlich auf den Fluren Fernseher stehen, wo die einzelnen Builds abgebildet sind und die sind entweder rot, grün, oder gelb teilweise. Teilweise war ich auch bei Kunden wo der SonarCube Report öffentlich dort stand. Da standen natürlich auf dem Monitor keine Bilder aber jeder der entsprechend sieht, dass da ein neues Issue gekommen ist, kann in sein Büro rennen sagen: haha, der hat wieder irgendwas kaputt gemacht. Da könnte auch Mobbing daraus entstehen. Unabhängig davon, was die Geschäftsleitung oder der Vorgesetzte dazu sagt, wie die Performance eine Mitarbeiters ist. Da könnte auch so etwas daraus entstehen. Also das ist schon ein Problem.
Q: Ist dir bei einem Kunden schon einmal aufgefallen, dass dort dein Verhalten anhand einer Auswertung von Daten aus dem Issuetracker oder dem Git Repository beurteilt wurde?
A: Ja, tatsächlich wurde ich bei einem Kunden schonmal darauf angesprochen, was mich für mich positiv aber trotzdem überraschend für mich war, dass ich viele Issues in kurzer Zeit abschließen konnte und mit übersichtlichen Commits. Für mich ist es usus kleine Commits zu machen, da das dann schon eine Verbesserung des Codes ist und dann mache ich iterativ weiter. Es gibt aber viele Entwickler, die machen einen rießen Commit. Und da wurde ich eben einmal dafür gelobt, dass ich das so mache. Wenn ich da jetzt im Nachhinein darüber nachdenke, dann war das damals für mich zwar positiv aber es hätte ja auch negativ ausfallen können. Es hätte ja auch heißen können: “Ja, du hast jetzt 3 Commits gemacht die Woche und du hast jetzt zwar etwas umgesetzt aber das war jetzt nicht so erfolgreich.” Das hätte ja auch passieren können unter Umständen. Da merkt man eben schon, dass da Unternehmen zum Teil ein Auge darauf haben und das auch entsprechend bewerten.
Q: Fällt dir noch etwas ein zu Systemen, wo Daten ausgewertet werden, an die wir bisher noch nicht gedacht haben?
A: Ich glaube tatsächlich, dass ich in meiner beratenden Tätigkeit garnicht in Berührung mit solchen Systemen komme, da das ja schon brisantes Thema ist. Diese Systeme sind in dem Sinne bestimmt auch gut abgeschottet und abgegrenzt. Wenn ich jetzt an Issue Tracking Systeme denke bei denen ich auch beim Kunden Zugriff bekomme, dann ist das insofern auch komplett eingeschränkt, dass ich dort nur eine Einsicht auf die Projekte habe, wo ich auch tätig bin. Und entsprechend alles andere, was das Unternehmen noch macht überhaupt nicht einsehen kann. Aber das ist bei manchen Kunden auch unterschiedlich. Oder auch nicht gradlinig durchgezogen. Bei einem Issue Tracking System werde ich als Externer einem Ptojekt zugewiesen, dann weiß das Issue Tracking System, dass ich nur dieses Projekt sehen darf. Anders ist es jetzt beim Git Repository. Da kann ich alle Git Repositories sehen. Also wenn ich wollte, dann könnte ich auch andere Repositories klonen bei dem Kunden vor Ort am Kunden-PC und da Einsichten bekommen. Das hat jetzt aber nicht so viel mit Datenschutz zu tun, sondern ist eher ein Sicherheitsleck. Aber ich kann mich auch beim Jenkins einloggen und kann alles konfigurieren. Und kann auch jeden einzelnen Buildjob sehen und könnte da halt auch bei manchen Kunden alles anschauen. Also bei manchen Kunden, bei manchen kriege ich auch auf gar nichts Zugriff. Es gibt Kunden da darf ich zwar meinen Laptop anmachen aber ich kann nicht ins Internet und muss immer mit einem anderen Entwickler an seinem Rechner pair programming machen. Da habe ich gar keine Zugriffsmöglichkeit auf irgend etwas. Das gibt es auch.
Q: Dort könnten sie aber natürlich auch nachvollziehen im Nachhinein, dass du dort, obwohl du die Rechte dazu hattest, irgendwelche Sachen gemacht hast, die du nicht hättest machen sollen.
A: Im Zweifel ja, aber das tue ich ja nicht. Aber das ist schon beachtlich. Theoretisch hätte ich da ja schon Zugriff auch auf Daten von Entwicklern, mit denen ich so eigentlich garnicht in Berührung komme.
Q: Stimmt, du bekommst dort natürlich auch Zugriff auf alle Metadaten der anderen Entwickler die irgendwo liegen.
A: Letzten endes ja. Je nachdem. Wenn ich jetzt nur auf dem Git Repository arbeite des spezifischen Projekts arbeite, dann ja. Aber dadurch, dass ich auf dem Jenkins jeden einzelnen Buildjob sehen kann und da entsprechend schon schauen kann wer was commited hat. Das steht dort ja mit Referenz dabei, in vielen Fällen. Ist es tatsächlich potenziell möglich Metainformationen über eine Person zu bekommen, die ich in meinem Leben noch nie sah, in dem Unternehmen. Und Zeitstempel, welcher Issues ist da relevant, fehlgeschlagene Builds, könnte ich dann entsprechend einer Person zuordnen und könnte mir dann schon eine Meinung über diesen Menschen bilden, wenn ich da Zeit investieren würde und eine Intention dazu hätte.
Ein krasses Beispiel fällt mir noch ein zum Thema Datenschutz. Da bin ich auch in einem Unternemen gewesen, in dem überall Kameras sind. Was ja erstmal sicherheitsrelevant ist. In vielen Unternehmen sind an öffentlichen Orten Kameras. Es hieß auch von dem Unternehmen, dass das für die Sicherheit ist, aber ich weiß von Mitarbeitern, über Smalltalk, dass die teilweise von dem Personalchef angeschrieben wurden, dass sie gefälligst ihre Arbeitszeiten vernünftig schlüsseln sollen in dem Arbeitszeitmanagementtool. Weil er auf den Kameras geschaut hat wann das Unternehmen betreten und verlassen wurde und das nicht mit dem übereinstimmte was die Kamera her gibt. Das ist schon echt heftig.
Q: Aber wenn jemand bereit ist so etwas zu machen, dann sehe ich auch nicht, warum er nicht auf die Commitzeiten schauen sollte um zu sehen, wann jemand gearbeitet hat, oder nicht. Das mit den Kameras ist den Leuten ja irgendwie bewusst, aber im Zweifelsfall denkst du da ja garnicht daran. Wenn z.B. jemand morgends nie commitet oder so.
A: Man kann ja aber jetzt nicht wirklich pauschal von den Commitzeiten darauf schließen, wann jemand gearbeitet hat. Manche Menschen leiten das vielleicht davon ab, aber das ist komplett falsch, dieser Gedanke das so zu verfolgen. Es gibt eben Issues, die sind schwer zu lösen und man brauch Recherche, Vorarbeit um ein Problem zu lösen. Und bei anderen Problemen geht es sehr schnell. Also kann ein potenziell schlechterer Entwickler mehr Commits haben als jemand der ein Experte ist und sehr professionell arbeitet. Weil dieser Mensch eben eine schwierigere Aufgabe zu lösen hat. Und er dadurch natürlich auch der Richtige für diese Aufgabe ist. Von daher weiß ich jetzt nicht was es dem Unternehmen jetzt bringen soll, da die Commits durchzulesen, um davon etwas abzuleiten. Ich finde das mit der Kamera krass weil man da sieht, dass jemand physisch nicht da war, obwohl er das angegeben hat. Oder auch die Pausenlänge wurde damit kontrolliert. Man muss ja gesetzlich in 6 Stunden Arbeit 30 Minuten Pause gehabt haben. Undi die meisten tragen dann aber auch tatsächlich nur 30 Minuten ein, was natürlich auch nicht legitim ist, dem Arbeitgeber gegenüber, wenn man da schummelt. Klar will der Arbeitsgeber da dann irgendwelche Kontrollen haben, wobei das Datenschutztechnisch natürlich bedenklich ist. Ich weiß garnicht wie da der Rahmen überhaupt eingegrenzt werden soll.
Q: Nochmal zu den Commit Zeitstempeln: wenn jemand etwas immer noch spät abends commited, dann könnte der Arbeitgeber daraus schließen, dass die Person gerade vielleicht psychische Probleme hat und deshalb nicht schnell genug mit der Arbeit voran kommt. Wenn es ein guter Arbeitgeber ist, dann hilft er dem Mitarbeiter dann, aber vielleicht hat es auch negative Konsequenzen.
A: Ja, es kann natürlich positive als auch negative Folgen haben. Ein gutes Unternehmen würde vielleicht auf den Arbeitnehmer zugehen und ihm sagen, dass er sich nicht verpflichtet fühlen sollte noch so spät zu arbeiten.

